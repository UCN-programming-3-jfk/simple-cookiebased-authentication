@model SimpleCookiebasedAuthentication.Models.LoginModel


@if (!Context.User.Identity.IsAuthenticated)
{
    <h4>Please log in</h4>

    using (@Html.BeginForm())
    {
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        <br />
        @Html.LabelFor(m => m.UserName);
        <br />
        @Html.EditorFor(m => m.UserName);
        <br />
        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        <br />
        @Html.LabelFor(m => m.Password);
        <br />
        @Html.EditorFor(m => m.Password);
        <br />
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        <br />
        <button type="submit">Log in</button>
        <br />
    }
    <br />
    <p>Use the username 'Bob' or 'Admin' and the password '1234' to authenticate.</p>
    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
}

<div class="container" style="margin:10px;border:1px solid black;background-color:#eeffff;">
    <p>
        <b>Explanation</b>
        <br />The entire AccountController allows unauthorized access, as it isn't decorated with the [Authorize] attribute.
        <br />The validation comes from the attributes on the LoginModel.
        <br />Both properties require a non-null value and the regular expression attribute enforces a 'no spaces' rule.
    <p>
        <pre style="white-space:pre">
            public class LoginModel
        <br />{
        <br />  [Required]
        <br />  [RegularExpression(@@"[^\s]+", ErrorMessage ="No spaces in username")]
        <br />  public string UserName { get; set; }
        <br />
        <br />  [Required]
        <br />  [RegularExpression(@@"[^\s]+", ErrorMessage = "No spaces in password")]
        <br />  public string Password { get; set; }
        <br />}
        </pre>
    </p>
</div>
